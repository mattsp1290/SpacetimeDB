// // THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB
package spacetimedb

import (
	"fmt"

	"github.com/clockworklabs/SpacetimeDB/crates/bindings-go/pkg/spacetimedb"
)

// EchoU8Args contains arguments for the echo_u8 reducer
type EchoU8Args struct {
	Id    uint32 `json:"id" bsatn:"id"`
	Value uint8  `json:"value" bsatn:"value"`
}

// EchoU8 is a SpacetimeDB reducer
// Serializes a u8 value to BSATN and stores the result for testing
func EchoU8(ctx *spacetimedb.ReducerContext, args EchoU8Args) error {
	// Serialize the u8 value using BSATN
	bsatnData, err := spacetimedb.BsatnSerializeU8(args.Value)
	if err != nil {
		return fmt.Errorf("failed to serialize u8 value: %w", err)
	}

	// Create the test result
	result := BsatnTestResult{
		Id:        args.Id,
		TestName:  "echo_u8",
		InputData: fmt.Sprintf("%d", args.Value),
		BsatnData: bsatnData,
	}

	// Store the result in the table
	return ctx.Insert(result)
}

// RegisterEchoU8 registers the echo_u8 reducer with SpacetimeDB
func RegisterEchoU8() {
	spacetimedb.RegisterSimpleReducer("echo_u8", "EchoU8", func(ctx *spacetimedb.ReducerContext, args []byte) spacetimedb.ReducerResult {
		// Deserialize the args slice into EchoU8Args using BSATN
		var parsedArgs EchoU8Args
		if err := spacetimedb.BsatnParseReducerArgs(args, &parsedArgs); err != nil {
			return spacetimedb.ReducerResult{Error: fmt.Errorf("failed to deserialize args: %w", err)}
		}

		// If parsing fails, use default test values for demonstration
		if len(args) == 0 {
			parsedArgs = EchoU8Args{Id: 1, Value: 42}
		}

		if err := EchoU8(ctx, parsedArgs); err != nil {
			return spacetimedb.ReducerResult{Error: err}
		}
		return spacetimedb.ReducerResult{}
	})
}
