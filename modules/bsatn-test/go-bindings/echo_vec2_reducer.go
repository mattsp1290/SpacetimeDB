// // THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB
package spacetimedb

import (
	"fmt"

	"github.com/clockworklabs/SpacetimeDB/crates/bindings-go/pkg/spacetimedb"
)

// EchoVec2Args contains arguments for the echo_vec2 reducer
type EchoVec2Args struct {
	Id uint32 `json:"id" bsatn:"id"`
	X  int32  `json:"x" bsatn:"x"`
	Y  int32  `json:"y" bsatn:"y"`
}

// EchoVec2 is a SpacetimeDB reducer
// Serializes [x, y] array to BSATN and stores the result for testing
func EchoVec2(ctx *spacetimedb.ReducerContext, args EchoVec2Args) error {
	// Create array and serialize using BSATN
	array := []int32{args.X, args.Y}
	bsatnData, err := spacetimedb.BsatnSerializeI32Array(array)
	if err != nil {
		return fmt.Errorf("failed to serialize i32 array: %w", err)
	}

	// Create the test result
	result := BsatnTestResult{
		Id:        args.Id,
		TestName:  "echo_vec2",
		InputData: fmt.Sprintf("[%d, %d]", args.X, args.Y),
		BsatnData: bsatnData,
	}

	// Store the result in the table
	return ctx.Insert(result)
}

// RegisterEchoVec2 registers the echo_vec2 reducer with SpacetimeDB
func RegisterEchoVec2() {
	spacetimedb.RegisterSimpleReducer("echo_vec2", "EchoVec2", func(ctx *spacetimedb.ReducerContext, args []byte) spacetimedb.ReducerResult {
		var parsedArgs EchoVec2Args
		// Check if args is empty and use default test values if so
		if len(args) == 0 {
			parsedArgs = EchoVec2Args{Id: 2, X: 10, Y: 20}
		} else {
			// Deserialize the args slice into EchoVec2Args using BSATN
			if err := spacetimedb.BsatnParseReducerArgs(args, &parsedArgs); err != nil {
				return spacetimedb.ReducerResult{Error: fmt.Errorf("failed to deserialize args: %w", err)}
			}
		}

		if err := EchoVec2(ctx, parsedArgs); err != nil {
			return spacetimedb.ReducerResult{Error: err}
		}
		return spacetimedb.ReducerResult{}
	})
}
