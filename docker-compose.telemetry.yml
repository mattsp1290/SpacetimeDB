# SpacetimeDB with OpenTelemetry Telemetry Stack
# This configuration integrates SpacetimeDB with a complete observability stack
# including OpenTelemetry Collector, Prometheus, Grafana, and Jaeger

version: '3.8'

services:
  # SpacetimeDB with telemetry enabled
  spacetimedb:
    build:
      context: .
      dockerfile: Dockerfile.prod
    image: ${DOCKER_REGISTRY:-spacetimedb}:${SPACETIMEDB_VERSION:-latest}
    container_name: spacetimedb-telemetry
    restart: unless-stopped
    init: true
    
    ports:
      - "${SPACETIMEDB_PORT:-3000}:3000"
      - "9000:9000"  # Prometheus metrics endpoint
    
    volumes:
      - spacetimedb-data:/var/lib/spacetimedb
      - spacetimedb-logs:/var/log/spacetimedb
      - ./telemetry/config:/etc/spacetimedb:ro
      - ./modules:/opt/modules:ro
      - ./telemetry/data/logs:/telemetry/logs
    
    environment:
      # Basic configuration
      - SPACETIMEDB_LOG_LEVEL=${SPACETIMEDB_LOG_LEVEL:-info}
      - RUST_LOG=${RUST_LOG:-info,spacetimedb=debug}
      
      # Telemetry configuration
      - SPACETIMEDB_METRICS_ENABLED=true
      - SPACETIMEDB_METRICS_BIND=0.0.0.0:9000
      - SPACETIMEDB_TRACE_OTLP_ENDPOINT=http://otel-collector:4317
      - SPACETIMEDB_METRICS_PROMETHEUS_ENABLED=true
      
      # Additional telemetry settings
      - OTEL_SERVICE_NAME=spacetimedb
      - OTEL_TRACES_EXPORTER=otlp
      - OTEL_METRICS_EXPORTER=prometheus
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://otel-collector:4317
      - OTEL_RESOURCE_ATTRIBUTES=service.name=spacetimedb,service.version=${SPACETIMEDB_VERSION:-latest},deployment.environment=development
    
    networks:
      - spacetimedb-telemetry-network
    
    depends_on:
      - otel-collector
    
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/ping"]
      interval: 30s
      timeout: 3s
      retries: 3
      start_period: 40s

  # OpenTelemetry Collector
  otel-collector:
    image: otel/opentelemetry-collector-contrib:latest
    container_name: spacetimedb-otel-collector
    command: ["--config=/etc/otel-collector-config.yaml"]
    volumes:
      - ./telemetry/configs/otel/otel-collector-config.yaml:/etc/otel-collector-config.yaml
      - ./telemetry/data:/data
    ports:
      - "4317:4317"   # OTLP gRPC receiver
      - "4318:4318"   # OTLP HTTP receiver
      - "13133:13133" # Health check extension
      - "8889:8889"   # Prometheus metrics endpoint
    networks:
      - spacetimedb-telemetry-network
    depends_on:
      - prometheus
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:13133/"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: spacetimedb-prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=7d'
      - '--web.enable-lifecycle'
    volumes:
      - ./telemetry/configs/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - spacetimedb-telemetry-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: spacetimedb-grafana
    volumes:
      - grafana-data:/var/lib/grafana
      - ./telemetry/configs/grafana/provisioning:/etc/grafana/provisioning
      - ./telemetry/configs/grafana/dashboards:/var/lib/grafana/dashboards
    ports:
      - "3001:3000"  # Using 3001 to avoid conflict with SpacetimeDB
    networks:
      - spacetimedb-telemetry-network
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-piechart-panel
      - GF_SERVER_ROOT_URL=http://localhost:3001
    depends_on:
      - prometheus
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Jaeger (for trace visualization)
  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: spacetimedb-jaeger
    ports:
      - "16686:16686" # Jaeger UI
      - "14250:14250" # gRPC
    networks:
      - spacetimedb-telemetry-network
    environment:
      - COLLECTOR_OTLP_ENABLED=true
      - SPAN_STORAGE_TYPE=memory
      - MEMORY_MAX_TRACES=10000
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:16686/"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Optional: Nginx reverse proxy for unified access
  nginx:
    image: nginx:alpine
    container_name: spacetimedb-telemetry-proxy
    ports:
      - "8080:80"
    volumes:
      - ./telemetry/configs/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - spacetimedb
      - grafana
      - jaeger
      - prometheus
    networks:
      - spacetimedb-telemetry-network
    profiles:
      - with-proxy
    restart: unless-stopped

networks:
  spacetimedb-telemetry-network:
    driver: bridge
    name: spacetimedb-telemetry-network

volumes:
  spacetimedb-data:
    name: spacetimedb-telemetry-data
  spacetimedb-logs:
    name: spacetimedb-telemetry-logs
  prometheus-data:
    name: spacetimedb-prometheus-data
  grafana-data:
    name: spacetimedb-grafana-data
